# Talent Grid - Cursor Rules

## üéØ Vis√£o Geral do Projeto
Este √© um sistema ERP completo para gest√£o de Recursos Humanos empresariais, desenvolvido como monorepo com PNPM Workspaces, TypeScript, Fastify, Prisma e PostgreSQL. O projeto segue princ√≠pios SOLID e Domain-Driven Design (DDD).

## üìÅ Estrutura do Projeto
```
talentgrid/
‚îú‚îÄ‚îÄ apps/
‚îÇ   ‚îú‚îÄ‚îÄ api/          # Backend API (Fastify + TypeScript)
‚îÇ   ‚îî‚îÄ‚îÄ web/          # Frontend Web Application
‚îú‚îÄ‚îÄ packages/         # Pacotes compartilhados
‚îÇ   ‚îî‚îÄ‚îÄ typescript-config/
‚îú‚îÄ‚îÄ docs/            # Documenta√ß√£o
‚îî‚îÄ‚îÄ tools/           # Scripts e ferramentas
```

## üõ†Ô∏è Stack Tecnol√≥gica
- **Gerenciamento**: PNPM Workspaces + Turbo
- **Backend**: TypeScript + Fastify + Prisma
- **Banco**: PostgreSQL
- **Testes**: Vitest + Coverage
- **Qualidade**: Biome (Linting + Formatting)
- **Arquitetura**: SOLID + DDD

## üìã Padr√µes de Desenvolvimento

### üèóÔ∏è Arquitetura e Organiza√ß√£o
- **SEMPRE** siga os princ√≠pios SOLID
- **SEMPRE** aplique Domain-Driven Design (DDD)
- **SEMPRE** organize c√≥digo por dom√≠nios/contextos
- **SEMPRE** use inje√ß√£o de depend√™ncias
- **SEMPRE** mantenha separa√ß√£o clara entre camadas (Domain, Application, Infrastructure, Presentation)

### üìù Conven√ß√µes de C√≥digo

#### TypeScript
- **SEMPRE** use TypeScript strict mode
- **SEMPRE** defina tipos expl√≠citos para par√¢metros e retornos
- **SEMPRE** use interfaces para contratos
- **SEMPRE** prefira `type` para unions e `interface` para objetos
- **SEMPRE** use `const assertions` quando apropriado
- **SEMPRE** evite `any`, use `unknown` quando necess√°rio
- **SEMPRE** use enums para valores constantes relacionados

#### Nomenclatura
- **SEMPRE** use PascalCase para classes, interfaces, enums e tipos
- **SEMPRE** use camelCase para vari√°veis, fun√ß√µes e m√©todos
- **SEMPRE** use UPPER_SNAKE_CASE para constantes
- **SEMPRE** use kebab-case para arquivos e diret√≥rios
- **SEMPRE** prefixe interfaces com `I` quando necess√°rio para clareza
- **SEMPRE** use nomes descritivos e autoexplicativos

#### Estrutura de Arquivos
```
src/
‚îú‚îÄ‚îÄ domain/           # Entidades, Value Objects, Domain Services
‚îú‚îÄ‚îÄ application/      # Use Cases, Application Services
‚îú‚îÄ‚îÄ infrastructure/   # Repositories, External Services
‚îú‚îÄ‚îÄ presentation/     # Controllers, DTOs, Middlewares
‚îî‚îÄ‚îÄ shared/          # Utilit√°rios compartilhados
```

### üß™ Testes
- **SEMPRE** escreva testes para novas funcionalidades
- **SEMPRE** mantenha cobertura m√≠nima de 80%
- **SEMPRE** use AAA pattern (Arrange, Act, Assert)
- **SEMPRE** nomeie testes de forma descritiva: `should [expected behavior] when [state under test]`
- **SEMPRE** use mocks para depend√™ncias externas
- **SEMPRE** teste casos de sucesso e falha
- **SEMPRE** agrupe testes relacionados com `describe`

#### Estrutura de Testes
```typescript
describe('UserService', () => {
  describe('createUser', () => {
    it('should create user successfully when valid data is provided', () => {
      // Arrange
      const userData = { name: 'John Doe', email: 'john@example.com' };
      
      // Act
      const result = userService.createUser(userData);
      
      // Assert
      expect(result).toBeDefined();
      expect(result.name).toBe(userData.name);
    });
  });
});
```

### üóÑÔ∏è Banco de Dados (Prisma)
- **SEMPRE** use migrations para mudan√ßas no schema
- **SEMPRE** nomeie tabelas no singular
- **SEMPRE** use snake_case para nomes de colunas
- **SEMPRE** defina relacionamentos explicitamente
- **SEMPRE** use √≠ndices para campos frequentemente consultados
- **SEMPRE** valide dados antes de salvar no banco

### üåê API (Fastify)
- **SEMPRE** use DTOs para valida√ß√£o de entrada
- **SEMPRE** retorne status codes apropriados
- **SEMPRE** use middleware para valida√ß√£o e autentica√ß√£o
- **SEMPRE** documente endpoints com OpenAPI/Swagger
- **SEMPRE** trate erros de forma consistente
- **SEMPRE** use async/await, evite callbacks

#### Estrutura de Controllers
```typescript
export class UserController {
  constructor(private userService: UserService) {}

  async createUser(request: FastifyRequest<{ Body: CreateUserDto }>, reply: FastifyReply) {
    try {
      const user = await this.userService.createUser(request.body);
      return reply.status(201).send(user);
    } catch (error) {
      return reply.status(400).send({ error: error.message });
    }
  }
}
```

### üì¶ Gerenciamento de Pacotes
- **SEMPRE** use PNPM para instalar depend√™ncias
- **SEMPRE** adicione depend√™ncias no workspace correto
- **SEMPRE** use workspace:* para depend√™ncias internas
- **SEMPRE** mantenha depend√™ncias atualizadas
- **SEMPRE** use exact versions para depend√™ncias cr√≠ticas

## üîÑ Padr√µes de Commit

### Conventional Commits
**SEMPRE** use o padr√£o Conventional Commits:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

#### Tipos de Commit
- `feat`: Nova funcionalidade
- `fix`: Corre√ß√£o de bug
- `docs`: Mudan√ßas na documenta√ß√£o
- `style`: Formata√ß√£o, ponto e v√≠rgula, etc.
- `refactor`: Refatora√ß√£o de c√≥digo
- `test`: Adi√ß√£o ou corre√ß√£o de testes
- `chore`: Mudan√ßas em ferramentas, configura√ß√µes, etc.
- `perf`: Melhorias de performance
- `ci`: Mudan√ßas em CI/CD
- `build`: Mudan√ßas no sistema de build

#### Exemplos
```bash
feat(auth): add JWT authentication middleware
fix(api): resolve user creation validation error
docs(readme): update installation instructions
refactor(domain): extract user validation logic
test(user): add unit tests for user service
chore(deps): update prisma to latest version
```

### Regras de Commit
- **SEMPRE** use mensagens em portugu√™s
- **SEMPRE** use modo imperativo ("add" n√£o "added")
- **SEMPRE** seja espec√≠fico e conciso
- **SEMPRE** referencie issues quando relevante: `Closes #123`
- **SEMPRE** quebre commits grandes em menores
- **SEMPRE** teste antes de commitar

## üé® Formata√ß√£o e Linting

### Biome
- **SEMPRE** execute `pnpm lint` antes de commitar
- **SEMPRE** execute `pnpm format-write` para formatar c√≥digo
- **SEMPRE** corrija todos os warnings de linting
- **SEMPRE** mantenha configura√ß√£o consistente do Biome

### Prettier/ESLint
- **SEMPRE** use aspas simples para strings
- **SEMPRE** use ponto e v√≠rgula
- **SEMPRE** use trailing commas
- **SEMPRE** mantenha linhas com m√°ximo 100 caracteres
- **SEMPRE** use indenta√ß√£o de 2 espa√ßos

## üîí Seguran√ßa

### Dados Sens√≠veis
- **SEMPRE** use vari√°veis de ambiente para configura√ß√µes sens√≠veis
- **SEMPRE** valide e sanitize inputs do usu√°rio
- **SEMPRE** use HTTPS em produ√ß√£o
- **SEMPRE** implemente rate limiting
- **SEMPRE** use hash para senhas (bcrypt/argon2)
- **SEMPRE** implemente CORS adequadamente

### Autentica√ß√£o e Autoriza√ß√£o
- **SEMPRE** use JWT para autentica√ß√£o
- **SEMPRE** implemente refresh tokens
- **SEMPRE** valide permiss√µes em cada endpoint
- **SEMPRE** use middleware de autentica√ß√£o
- **SEMPRE** implemente logout adequado

## üìö Documenta√ß√£o

### C√≥digo
- **SEMPRE** documente fun√ß√µes p√∫blicas com JSDoc
- **SEMPRE** explique l√≥gica complexa com coment√°rios
- **SEMPRE** mantenha README atualizado
- **SEMPRE** documente APIs com OpenAPI/Swagger
- **SEMPRE** mantenha CHANGELOG atualizado

### Exemplo de JSDoc
```typescript
/**
 * Cria um novo usu√°rio no sistema
 * @param userData - Dados do usu√°rio a ser criado
 * @returns Promise com o usu√°rio criado
 * @throws {ValidationError} Quando dados s√£o inv√°lidos
 * @throws {DuplicateError} Quando email j√° existe
 */
async createUser(userData: CreateUserDto): Promise<User> {
  // implementation
}
```

## üöÄ Performance

### Otimiza√ß√µes
- **SEMPRE** use lazy loading quando apropriado
- **SEMPRE** implemente cache para consultas frequentes
- **SEMPRE** use pagina√ß√£o para listas grandes
- **SEMPRE** otimize queries do banco de dados
- **SEMPRE** use compression (gzip) na API
- **SEMPRE** implemente connection pooling

## üêõ Debugging e Logs

### Logging
- **SEMPRE** use n√≠veis apropriados de log (error, warn, info, debug)
- **SEMPRE** inclua contexto relevante nos logs
- **SEMPRE** n√£o logue dados sens√≠veis
- **SEMPRE** use structured logging (JSON)
- **SEMPRE** implemente log rotation

### Debugging
- **SEMPRE** use debugger statements quando necess√°rio
- **SEMPRE** adicione logs em pontos cr√≠ticos
- **SEMPRE** teste cen√°rios de erro
- **SEMPRE** implemente health checks

## üîÑ Workflow de Desenvolvimento

### Branch Strategy
- **SEMPRE** use Git Flow
- **SEMPRE** crie branches feature a partir de `develop`
- **SEMPRE** use nomes descritivos: `feature/user-authentication`
- **SEMPRE** fa√ßa PR para `develop`
- **SEMPRE** mantenha branches atualizadas

### Pull Requests
- **SEMPRE** escreva descri√ß√£o clara do PR
- **SEMPRE** referencie issues relacionadas
- **SEMPRE** adicione screenshots quando relevante
- **SEMPRE** mantenha PRs pequenos e focados
- **SEMPRE** solicite review de pelo menos 2 pessoas

### Code Review
- **SEMPRE** revise c√≥digo com aten√ß√£o
- **SEMPRE** verifique se testes foram adicionados
- **SEMPRE** confirme se documenta√ß√£o foi atualizada
- **SEMPRE** teste localmente antes de aprovar
- **SEMPRE** seja construtivo nos coment√°rios

## üìã Checklist de Desenvolvimento

### Antes de Commitar
- [ ] C√≥digo compila sem erros
- [ ] Todos os testes passam
- [ ] Linting sem warnings
- [ ] C√≥digo formatado corretamente
- [ ] Documenta√ß√£o atualizada
- [ ] Commit message segue padr√£o

### Antes de Fazer PR
- [ ] Branch atualizada com develop
- [ ] Todos os testes passam
- [ ] Coverage mantido ou melhorado
- [ ] Documenta√ß√£o atualizada
- [ ] Screenshots adicionados (se UI)
- [ ] PR description completa

### Antes de Merge
- [ ] Code review aprovado
- [ ] CI/CD passando
- [ ] Conflitos resolvidos
- [ ] Branch atualizada
- [ ] Testes de integra√ß√£o passando

## üéØ Objetivos de Qualidade

### M√©tricas
- **Cobertura de testes**: M√≠nimo 80%
- **Performance**: Response time < 200ms para APIs
- **Disponibilidade**: 99.9% uptime
- **Seguran√ßa**: Zero vulnerabilidades cr√≠ticas
- **Documenta√ß√£o**: 100% das APIs documentadas

### Monitoramento
- **SEMPRE** implemente health checks
- **SEMPRE** monitore performance
- **SEMPRE** configure alertas para erros
- **SEMPRE** mantenha logs estruturados
- **SEMPRE** implemente m√©tricas de neg√≥cio

## üö® Regras Cr√≠ticas (NUNCA FA√áA)

- **NUNCA** commite c√≥digo que n√£o compila
- **NUNCA** commite senhas ou tokens
- **NUNCA** force push para branches principais
- **NUNCA** merge sem code review
- **NUNCA** ignore testes falhando
- **NUNCA** use `any` sem justificativa
- **NUNCA** deixe c√≥digo comentado em produ√ß√£o
- **NUNCA** ignore warnings de seguran√ßa

## üìû Suporte e D√∫vidas

- **Issues**: [GitHub Issues](https://github.com/rafaelsantana6/talentgrid/issues)
- **Discuss√µes**: [GitHub Discussions](https://github.com/rafaelsantana6/talentgrid/discussions)
- **Documenta√ß√£o**: [docs/](docs/)

---

**Lembre-se**: Estas regras existem para manter a qualidade e consist√™ncia do c√≥digo. Quando em d√∫vida, sempre prefira clareza e legibilidade sobre "c√≥digo inteligente".
