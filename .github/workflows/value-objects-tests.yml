name: Value Objects Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/api/src/domain/value-objects/**'
      - 'apps/api/src/domain/types/**'
      - 'apps/api/src/domain/validation/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/api/src/domain/value-objects/**'
      - 'apps/api/src/domain/types/**'
      - 'apps/api/src/domain/validation/**'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  value-objects-tests:
    name: Value Objects Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-group: [
          'cpf',
          'rg', 
          'cnh',
          'email',
          'phone',
          'cep',
          'salary',
          'address',
          'dependent'
        ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Value Object tests - ${{ matrix.test-group }}
        run: |
          cd apps/api
          pnpm test src/domain/value-objects/${{ matrix.test-group }}.test.ts

      - name: Generate coverage for ${{ matrix.test-group }}
        run: |
          cd apps/api
          pnpm test src/domain/value-objects/${{ matrix.test-group }}.test.ts --coverage

      - name: Upload coverage for ${{ matrix.test-group }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-group }}
          path: apps/api/coverage/
          retention-days: 7

  aggregate-tests:
    name: Employee Aggregate Tests
    runs-on: ubuntu-latest
    needs: value-objects-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Employee Aggregate tests
        run: |
          cd apps/api
          pnpm test src/domain/entities/employee.test.ts

      - name: Run Repository tests
        run: |
          cd apps/api
          pnpm test src/domain/repositories/employee-repository.test.ts

  domain-integration-tests:
    name: Domain Integration Tests
    runs-on: ubuntu-latest
    needs: [value-objects-tests, aggregate-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run all domain tests
        run: |
          cd apps/api
          pnpm test src/domain/

      - name: Generate comprehensive coverage
        run: |
          cd apps/api
          pnpm test:coverage src/domain/

      - name: Upload comprehensive coverage
        uses: actions/upload-artifact@v3
        with:
          name: domain-coverage-comprehensive
          path: apps/api/coverage/
          retention-days: 7

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const coveragePath = path.join('apps/api/coverage/lcov-report/index.html');
              if (fs.existsSync(coveragePath)) {
                const coverage = fs.readFileSync(coveragePath, 'utf8');
                const match = coverage.match(/<span class="strong">(\d+\.?\d*)%<\/span>/);
                const coveragePercent = match ? match[1] : 'N/A';
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ðŸ“Š Test Coverage Report
                  
                  **Domain Tests Coverage:** ${coveragePercent}%
                  
                  âœ… All Value Objects tests passed
                  âœ… Employee Aggregate tests passed
                  âœ… Domain integration tests passed
                  
                  [View detailed coverage report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
                });
              }
            } catch (error) {
              console.log('Could not generate coverage comment:', error.message);
            }
