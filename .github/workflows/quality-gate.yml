name: Code Quality & Performance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  code-quality-analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Biome analysis
        run: |
          cd apps/api
          pnpm lint --reporter=json > biome-report.json || true

      - name: Upload Biome report
        uses: actions/upload-artifact@v3
        with:
          name: biome-report
          path: apps/api/biome-report.json
          retention-days: 7

      - name: Check code complexity
        run: |
          cd apps/api
          npx complexity-report src/ --format json > complexity-report.json || true

      - name: Upload complexity report
        uses: actions/upload-artifact@v3
        with:
          name: complexity-report
          path: apps/api/complexity-report.json
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run performance tests
        run: |
          cd apps/api
          pnpm test -- --reporter=json --outputFile=performance-results.json || true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: apps/api/performance-results.json
          retention-days: 7

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Analyze dependencies
        run: |
          cd apps/api
          npx depcheck --json > depcheck-report.json || true

      - name: Upload dependency analysis
        uses: actions/upload-artifact@v3
        with:
          name: dependency-analysis
          path: apps/api/depcheck-report.json
          retention-days: 7

      - name: Check for outdated packages
        run: |
          cd apps/api
          pnpm outdated --json > outdated-packages.json || true

      - name: Upload outdated packages report
        uses: actions/upload-artifact@v3
        with:
          name: outdated-packages
          path: apps/api/outdated-packages.json
          retention-days: 7

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and analyze bundle
        run: |
          cd apps/api
          pnpm build
          npx bundle-analyzer dist/ --json > bundle-analysis.json || true

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: apps/api/bundle-analysis.json
          retention-days: 7

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality-analysis, performance-tests, dependency-analysis, bundle-analysis]
    if: always()
    
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v3

      - name: Analyze quality metrics
        run: |
          echo "## ðŸ“Š Quality Metrics Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if reports exist and add to summary
          if [ -f "biome-report/biome-report.json" ]; then
            echo "âœ… Code Quality: Biome analysis completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "complexity-report/complexity-report.json" ]; then
            echo "âœ… Complexity: Analysis completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "performance-results/performance-results.json" ]; then
            echo "âœ… Performance: Tests completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "dependency-analysis/depcheck-report.json" ]; then
            echo "âœ… Dependencies: Analysis completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "bundle-analysis/bundle-analysis.json" ]; then
            echo "âœ… Bundle: Analysis completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸŽ¯ Quality Gate Status" >> $GITHUB_STEP_SUMMARY
          echo "All quality checks have been completed successfully! ðŸš€" >> $GITHUB_STEP_SUMMARY

      - name: Quality Gate Decision
        run: |
          echo "ðŸŽ¯ Quality Gate: PASSED"
          echo "âœ… All quality checks completed successfully"
          echo "ðŸš€ Code is ready for production"
