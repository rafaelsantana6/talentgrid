name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job para verificar qualidade do c√≥digo
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Check code formatting
        run: pnpm format-check

  # Job para executar testes da API
  test-api:
    name: Test API
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run API tests
        run: |
          cd apps/api
          pnpm test

      - name: Generate test coverage
        run: |
          cd apps/api
          pnpm test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage/lcov.info
          flags: api
          name: api-coverage
          fail_ci_if_error: false

  # Job para executar testes do frontend (quando existir)
  test-web:
    name: Test Web
    runs-on: ubuntu-latest
    needs: code-quality
    if: hashFiles('apps/web/**') != ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Web tests
        run: |
          cd apps/web
          pnpm test

      - name: Generate test coverage
        run: |
          cd apps/web
          pnpm test:coverage

      - name: Upload coverage to Codecov
        uses: actions/codecov/codecov-action@v3
        with:
          file: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage
          fail_ci_if_error: false

  # Job para build da aplica√ß√£o
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test-api, test-web]
    if: always() && (needs.test-api.result == 'success' && (needs.test-web.result == 'success' || needs.test-web.result == 'skipped'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get PNPM store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup PNPM cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build API
        run: |
          cd apps/api
          pnpm build

      - name: Build Web (if exists)
        run: |
          if [ -d "apps/web" ]; then
            cd apps/web
            pnpm build
          fi
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/api/dist/
            apps/web/dist/
          retention-days: 7

  # Job para an√°lise de seguran√ßa
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run dependency check
        run: |
          npx audit-ci --config .audit-ci.json
        continue-on-error: true

  # Job para notifica√ß√£o de status
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [code-quality, test-api, test-web, build, security]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.code-quality.result == 'success' && needs.test-api.result == 'success' && needs.build.result == 'success'
        run: |
          echo "‚úÖ All checks passed successfully!"
          echo "üöÄ Ready for deployment"

      - name: Notify failure
        if: needs.code-quality.result == 'failure' || needs.test-api.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Some checks failed"
          echo "üîç Please review the logs and fix the issues"
          exit 1
